- Class: meta
  Course: DataScienceAndR
  Lesson: RBasic-01-Introduction
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0

- Class: text
  Output: 這門課程要讓大家透過互動式的內容，上手R 語言。

- Class : text
  Output : 這份文件中的格式採用和Markdown相容的語法。
    為了讓大家快速上手，這裡先說明一些常見的Markdown語法
    所有的程式碼，都會用``來包覆。例如：當swirl提示要各位輸入：`sessionInfo()`
    就代表各位同學要在console輸入：sessionInfo()

- Class : text
  Output : 所有的超連結，都會用<>來包覆。例如：<https://www.google.com>
    代表要請大家打開 https://www.google.com

- Class: text
  Output: 本文的內容都取自於`help.start()`中的An Introduction to R。

- Class : text
  Output: 那我們就開始吧！

- Class : text
  Output: 我們跳過介紹R 語言的部分，直接學習操作R 的部分。
    在R 中，是可以隨時獲得一個函數的細節說明。舉例來說，如果
    我們要查詢`solve`這個函數的詳細說明，就輸入：`help(solve)`。
    另一種比較簡單的方式是：`?solve`


- Class: cmd_question
  Output: 現在請各位同學查詢`chol2inv`的說明。
  CorrectAnswer: help(chol2inv)
  AnswerTests: any_of_exprs("?chol2inv", "help(chol2inv)")
  Hint: 還記得`?`或`help`嗎？

- Class : text
  Output: 在R中，每一段指令都是一個expression。
    舉例來說，剛剛我們輸入的：`help(chol2inv)`就是一個有效的expression。

- Class : text
  Output: 而`help(chol2inv`少了一個`)`是無效的expression，需要完整的輸入help(chol2inv)

- Class : text
  Output: 通常每一個給R 的指令，不是一個expression，就是一個assignment

- Class : cmd_question
  Output: 舉例來說，`a <- 1`就是一個assigment的動作。
    請各位同學在console輸入`a <- 1`
  CorrectAnswer: a <- 1
  AnswerTests : omnitest("a <- 1", 1)

- Class : text
  Output: 通常R 在收到一個expression之後，它會做出以下的動作：

- Class : cmd_question
  Output: R 會evaluate這個expression，然後把結果顯示到螢幕上。
    舉例來說，請同學輸入：`a + 1`
  CorrectAnswer: a + 1
  AnswerTests: omnitest("a + 1", 2)

- Class : text
  Output: R 在收到`a + 1`這個expression之後，會進行計算，查到a 的值
    是1 ，再和1 做相加，最後把2 顯示到螢幕上。

- Class : cmd_question
  Output: 現在，請各位同學讓`a`的值變成 2。
  CorrectAnswer : a <- 2
  AnswerTests: any_of_exprs("a <- 2", "a = 2")

- Class : text
  Output: 有沒有注意到，R 並沒有在螢幕上顯示任何東西呢？

- Class: mult_question
  Output: 這裡測試一下同學懂不懂assignment的意思。請問現在如果
    我們在R 的console中輸入`a - 1`，會顯示什麼呢？
  AnswerChoices: 1;2;"不會顯示";"4"
  CorrectAnswer: 1
  AnswerTests: omnitest(correctVal= '1')
  Hint: 先想想`a - 1`是一個expression還是一個assignment，再想想`a`的值

- Class : text
  Output: 相信大家到這邊，對於expression和assignment有一些初步的認識。
    未來我們就是要寫大量的expression和assignment，來利用R 達成複雜的任務。

- Class : text
  Output: 我們可以把多個expression用`{`和`}`包覆起來，變成一個大的expression。

- Class : text
  Output: 我們也可以在程式碼中插入註解：`#`。所有在# 之後的輸入，R 都會略過。

- Class : text
  Output: 如果有一個expression還沒有完成，（可能是少了`)`或`}`），那R
    會在console的開頭用`+`來提示你。

- Class : text
  Output: 我們也可以用上下的按鍵來快速瀏覽輸入過的expression。

- Class : text
  Output: 要把指令輸入到R ，也不一定要在console上一個字一個字的打。
    我們可以透過`source`指令，來載入一個撰寫R 指令的文件，並且執行
    文件中的expressions。

- Class: cmd_question
  Output: 請各位同學看一下`source`的說明。輸入之後，使用R 一般界面的同學
    會看到跳出的說明視窗，內容則是R 對`source`的官方說明。。使用Rstudio
    的同學則請檢查右下角的視窗是否有切換至`source`的官方說明。
  CorrectAnswer: help(source)
  AnswerTests: any_of_exprs("help(source)", "?source")

- Class : text
  Output: 在各位同學安裝swirl的過程中，我們可能已經用過`source`
    來執行講師預先寫好的expressions來設定環境了。

- Class : text
  Output: 剛剛我們也有跟各位同學介紹過assignment。在R 裡面，這些
    我們存放資料的東西，例如剛剛的`a`，都叫做object。
    object可以是一個變數，也可以是一連串的數字，文字，甚至是函數，以及
    更複雜的東西。


- Class: cmd_question
  Output: 在R 中，我們可以利用`objects()`或`ls()`來列出所有目前存在的object
    的名字。請同學嘗輸入`objects()`或`ls()`
  CorrectAnswer: objects()
  AnswerTests: any_of_exprs("objects()", "ls()")

- Class : cmd_question
  Output: 我們可以刪除已經存在的物件。舉例來說，如果我們要刪除`a`，
    就只要輸入：`rm(a)`。請同學試試看：
  CorrectAnswer: rm(a)
  AnswerTests: omnitest("rm(a)")

- Class : text
  Output: 所有的R 物件都可以儲存到硬碟中，讓你之後可以從硬碟讀出資料
    繼續做分析。每次退出R 的時候，你都有機會把所有的物件存到一個叫做
    .RData的檔案之中。之後，只要在相同的目錄打開R，這些資料就會自動
    進入R ，讓你接關。

- Class : text
  Output: 所以R 官方建議使用者在不同的分析專案時，在不同的目錄底下
    跑R 。因為我們常常在分析的時候，建立一些名叫`x`或`y`的變數。
    在相同的案子中，`x`和`y`可能是很明顯的。
    但是當我們同時做很多分析時，就容易搞不清楚`x`是哪一個分析案子的`x`。

- Class : text
  Output : 第一章的內容就到此結束了。
