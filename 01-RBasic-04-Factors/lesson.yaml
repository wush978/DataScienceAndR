- Class: meta
  Course: DataScienceAndR
  Lesson: 01-RBasic-04-Factors
  Author: Chih-Cheng Liang
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0
- Class: text
  Output: |
    這個課程將帶大家快速了解R語言的Factor資料結構。
- Class: text
  Output: |
    Factor是一個向量物件，用途是儲存「類別」的資料。有這樣的資料格式，我們可以將資料集依照類別分組。
    屬於「類別」資料的例子如：「男、女」、「台北市、台中市、台東市、台南市」等。
- Class: cmd_question
  Output: |
    觀察一個實際的例子。
    課程儲存了一個文字向量 blood_type，記載著30個人的血型資料。請輸入 blood_type 。
  CorrectAnswer: blood_type
  AnswerTests: any_of_exprs('blood_type')
  Hint: 請輸入 blood_type
- Class: cmd_question
  Output: |
    大家可以觀察到，這個文字向量中有A, B, O, AB四種血型，在資料中重複出現。
    請輸入 `blood_type_factor <- factor(blood_type)`，將它轉為Factor向量。
  CorrectAnswer: blood_type_factor <- factor(blood_type)
  AnswerTests: any_of_exprs( "blood_type_factor = factor(blood_type)", "blood_type_factor
    <- factor(blood_type)" )
  Hint: 請輸入 blood_type_factor <- factor(blood_type)
- Class: cmd_question
  Output: |
    仔細觀察這個Factor向量。請輸入`blood_type_factor` 。
  CorrectAnswer: blood_type_factor
  AnswerTests: any_of_exprs('blood_type_factor')
  Hint: 請輸入 blood_type_factor
- Class: text
  Output: |
    觀察後可以發現，R印出Factor向量和文字向量的方式不太一樣。在Factor向量的部分多出了levels這個屬性。
- Class: cmd_question
  Output: |
    Factor向量中的levels屬性，代表向量中允許出現的類別。
    要取出這些類別，可使用levels函數。
    請輸入`levels(blood_type_factor)`來取出所有允許的血型。
  CorrectAnswer: levels(blood_type_factor)
  AnswerTests: any_of_exprs('levels(blood_type_factor)')
  Hint: levels(blood_type_factor)
- Class: cmd_question
  Output: |
    若在Factor向量中指派的類別不存在在levels之中，就會出現NA。
    請輸入`blood_type_factor[5] <- "C"`。
  CorrectAnswer: blood_type_factor[5] <- "C"
  AnswerTests: any_of_exprs( "blood_type_factor[5] <- \"C\" ", "blood_type_factor[5]
    = \"C\" " )
  Hint: blood_type_factor[5] <- "C"
- Class: cmd_question
  Output: |
    輸入`blood_type_factor`確認第五個元素變成NA。
  CorrectAnswer: blood_type_factor
  AnswerTests: any_of_exprs('blood_type_factor')
  Hint: blood_type_factor
- Class: text
  Output: |
    在R 的預設值中，排序levels時會依照字母順序排序。
- Class: cmd_question
  Output: |
    進一步觀察factor向量的結構。請輸入`str(blood_type_factor)`。
  CorrectAnswer: str(blood_type_factor)
  AnswerTests: any_of_exprs('str(blood_type_factor)')
  Hint: str(blood_type_factor)
- Class: text
  Output: |
    str印出的資訊顯示Factor向量的四個levels，並列出levels對應的名稱。
    在levels名稱後是一串整數，Factor實際上是以整數代表對應的levels名稱。
    例如：一開始3 代表第三個level「B」，第二個1 代表第一個level「A」。
    （你可以對照Rstudio右上角Environment中blood_type和 blood_type_factor）
- Class: text
  Output: |
    Factor向量本質上只是整數向量加上levels。而這樣設計的原因是儲存整數比儲存文字更省空間。
- Class: text
  Output: |
    「類別」的資料有兩種。分為「無順序」與「有順序」的，血型的資料是無順序的例子。因為血型並無大小先後之分，你無法說O型比A型大或小。
- Class: cmd_question
  Output: |
    若硬是將無順序的資料進行比大小，R會印出警告訊息。
    以血型例子，第一個血型是「A」，第二個血型是「AB」。
    請試著輸入`blood_type_factor[1]> blood_type_factor[2]`來比較大小。
  CorrectAnswer: blood_type_factor[1]> blood_type_factor[2]
  AnswerTests: any_of_exprs('blood_type_factor[1]> blood_type_factor[2]')
  Hint: blood_type_factor[1]> blood_type_factor[2]
- Class: cmd_question
  Output: |
    對於有順序的資料，請見另一個等第制資料集作為範例。
    請輸入`grades`載入五個同學的等第資料。
  CorrectAnswer: grades
  AnswerTests: any_of_exprs('grades')
  Hint: grades
- Class: text
  Output: |
    這個資料中有「A」、「B」、「C」三種等第，依照常理看來，A比B好、B比C好、A也比C好。
    所以我們可以將等第定出順序。
- Class: cmd_question
  Output: |
    要將grades轉為有順序的factor向量。做法是在factor函數中，將ordered設定為TRUE。
    並且將levels順序以向量方式傳入，level要由小到大填入。
    請同學輸入：`grades_factor <- factor(grades, ordered = TRUE, levels = c("C","B","A"))`
  CorrectAnswer: grades_factor <- factor(grades, ordered = TRUE, levels = c("C","B","A"))
  AnswerTests: any_of_exprs( "grades_factor <- factor(grades, ordered = TRUE, levels
    = c(\"C\",\"B\",\"A\"))", "grades_factor = factor(grades, ordered = TRUE, levels
    = c(\"C\",\"B\",\"A\"))" )
  Hint: grades_factor <- factor(grades, ordered = TRUE, levels = c("C","B","A"))
- Class: cmd_question
  Output: |
    輸入`grades_factor`並觀察。
  CorrectAnswer: grades_factor
  AnswerTests: any_of_exprs('grades_factor')
  Hint: grades_factor
- Class: text
  Output: |
    可以觀察到levels有順序。
- Class: cmd_question
  Output: |
    這時比較等第大小有意義。
    請輸入`grades_factor[1]> grades_factor[2]`，比較前兩個同學的等第。
  CorrectAnswer: grades_factor[1]> grades_factor[2]
  AnswerTests: any_of_exprs('grades_factor[1]> grades_factor[2]')
  Hint: grades_factor[1]> grades_factor[2]
- Class: text
  Output: |
    針對以上內容做個總結。
    Factor向量用來儲存類別的資料。level屬性限制能在向量中出現的類別種類。
    Factor本質上是整數向量，只是帶有levels。
    Factor可以是無順序或有順序的，可用在Factor函數中使用ordered=TRUE讓Factor變成有順序。
- Class: script
  Output: |
    最後，請同學運用這個課程所學到的技巧做簡短的練習。
    請同學在完成之後存檔，並輸入`submit()`來檢查結果是否符合預期。
    如果同學在檔案中看到亂碼，請使用Rstudio 左上角的File -> Reopen
    With Encoding... -> 選取：UTF-8
  Script: RBasic-04-HW.R
  AnswerTests: rbasic_04_hw_test()

