- Class: meta
  Course: DataScienceAndR
  Lesson: 03-RVisualization-04-Javascript-And-Maps
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 2.3.1.1

- Class: text
  Output: |
    大家好，本堂課主要跟大家解說，如何在R 裡面處理新時代的互動式繪圖與新型態的數據。

- Class: cmd_question
  Output: |
    我們會介紹的是googleVis套件。
    請同學安裝googleVis
  CorrectAnswer: check_then_install("googleVis", "0.5.10")
  AnswerTests: test_package_version("googleVis", "0.5.10")

- Class: cmd_question
  Output: |
    請同學載入googleVis套件。
  CorrectAnswer: library(googleVis)
  AnswerTests: test_search_path("googleVis")

- Class: cmd_question
  Output: |
    同學請打開`vignette("googleVis_examples", package = "googleVis")`，
    我們簡單用這個文件做範例。

- Class: text
  Output: |
    在第一章Line chart的部份，同學可以把滑鼠移動到線上。
    這就是用網頁技術做視覺化的好處：圖形可以「直接」跟使用者互動，而不需要透過程式碼。

- Class: cmd_question
  Output: |
    然而googleVis的API設計，需要我們完全自行整理資料。
    因此我們得先載入`dplyr`。
    請同學安裝`dplyr`或是輸入skip()跳過。
  CorrectAnswer: check_then_install("dplyr", "0.4.3")
  AnswerTests: test_package_version("dplyr", "0.4.3")

- Class: cmd_question
  Output: |
    請同學載入dplyr。
  CorrectAnswer: library(dplyr)
  AnswerTests: test_search_path("dplyr")

- Class: cmd_question
  Output: |
    請同學輸入：
    `dat1 <- group_by(hsb, race, sex) %>% summarise(math.avg = mean(math))`。
    
- Class: cmd_question
  Output: |
    接著我們輸入：`g <- gvisBarChart(dat1)`建立一個gvis物件。
    如果同學探索這個物件，會發現它是一個網頁的HTML。

- Class: cmd_question
  Output: |
    接著，我們輸入：`plot(g)`。
    
- Class: text
  Output: |
    同學的電腦瀏覽器中會打開一個網頁，上面繪製著一份barchart。
    如果我們把滑鼠移上去，還會跳出確切的值。

- Class: cmd_question
  Output: |
    然而，gvisBarChart接收資料的邏輯和dplyr所整理出的資料不太一致。
    gvisBarChart將操作顏色的類別，放在data.frame的column方向。
    因此，我們需要用一個可以快速做轉換的套件。
    請同學輸入`skip()`檢查是否有安裝reshape2套件。
    若無，課程會自動安裝該套件。
  CorrectAnswer: check_then_install("reshape2", "1.4.1")
  AnswerTests: test_package_version("reshape2", "1.4.1")

- Class: cmd_question
  Output: |
    請同學載入reshape2。
  CorrectAnswer: library(reshape2)
  AnswerTests: test_search_path("reshape2")

- Class: cmd_question
  Output: |
    接著我們執行：`dcast(dat1, race ~ sex)`。
- Class: text
  Output: |
    同學會看到sex欄位被拉到data.frame的欄位，也就是female和male各一欄。

- Class: cmd_question
  Output: |
    讓我們把這筆資料提供給gvisBarChart後呈現在網頁上。
    請同學輸入：`dcast(dat1, race ~ sex) %>% gvisBarChart() %>% plot()`。
- Class: text
  Output: |
    這次就會看到不同的性別有著不同的顏色。

- Class: cmd_question
  Output: |
    接著我們挑出read和math做scatter plot。
    請同學輸入：`select(hsb, read, math) %>% gvisScatterChart() %>% plot()`。
    
- Class: text
  Output: |
    目前googleVis整合了google Chart API，提供了許多功能。
    但是和ggplot2相比，它的功能仍是相對簡單。
    googleVis這類套件帶給R社群的影響，是讓大家了解javascript based的繪圖引擎所帶來的可能性。

- Class: text
  Output: |
    傳統的視覺化工具需要使用者與R互動，技術門檻很高。
    但是javascript等網頁技術則可以大幅度的降低這類技術門檻。

- Class: text
  Output: |
    因此，現在R 與javascript整合的套件可說是百花齊放，可惜目前為止我還沒有注意到有一套像ggplot2一樣有代表性的套件出現。

- Class: text
  Output: |
    googleVis也帶來了傳統R所沒有提供的繪圖類型。例如：Sankey Diagram。

- Class: cmd_question
  Output: |
    請同學輸入：`gvisSankey(dat_sk) %>% plot()`。
    
- Class: text
  Output: |
    這張圖描述了兩個state之間的流動。
    舉例來說，如果我們知道去年購買不同品牌筆電的消費者，今年各自是買哪一個品牌的筆電，那透過分析品牌間的數據變化，我們就可以利用Sankey Diagram來觀察變化
    的細節。

- Class: cmd_question
  Output: |
    接著，請同學輸入： `gvisCalendar(TWII) %>% plot`。
    
- Class: text
  Output: |
    這是拿台股指數搭配googleVis提供的月曆API所繪製的圖。
    我們可以從中清楚的看到台股停止交易(或是yahoo沒有抓到資料)的日期，大部份為週末。
    這類和人的活動很相關的資料，使用googleVis進行呈現，會比直接用傳統的line chart還要容易發現數據和周末等日期之間的相關性。

- Class: cmd_question
  Output: |
    還有其他範例，如：`gvisOrgChart(Regions) %>% plot`則是拿來繪製組織圖的選擇。

- Class: text
  Output: |
    接著我們介紹leaflet這個可以將地理資料視覺化的套件。
    我們會搭配leaflet的官方網頁，介紹leaflet的功能，
    同時也希望同學累積：自行利用網路資源學習更多
    R語言功能的經驗。

- Class: cmd_question
  Output: |
    官方網站的網址可以透過Google "R leaflet"來找到。
    在撰寫教材時，老師查到的網址是：
    <https://rstudio.github.io/leaflet/>
    請同學輸入`browseURL("https://rstudio.github.io/leaflet/")`

- Class: cmd_question
  Output: |
    接著請同學安裝leaflet套件，或是輸入`skip()`
    檢查有無安裝leaflet套件。
  CorrectAnswer: check_then_install("leaflet", "1.1.0")
  AnswerTests: test_package_version("leaflet", "1.1.0")

- Class: cmd_question
  Output: |
    接著，請載入leaflet。
  CorrectAnswer: library(leaflet)
  AnswerTests: test_search_path("leaflet")
  
- Class: text
  Output: |
    接著請同學閱讀官方網站的Introduction的部分。

- Class: cmd_question
  Output: |
    在老師撰寫教材時，leaflet官方網站有了第一個範例。
    請同學照著輸入：`m <- leaflet() %>% addTiles() %>% addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")`

- Class: cmd_question
  Output: |
    接著請同學輸入`m`來看看結果。
    有沒有看到類似leaflet官方說明上的圖呢？

- Class: text
  Output: |
    在閱讀一個套件的說明時，在仍然對套件很陌生的時候，
    我們第一件要做的事情就是先將範例複製貼上。
    這樣一來可以了解套件要做的事情，也可以測試套件是否
    運作正常。

- Class: text
  Output: |
    舉例來說，如果剛剛的指令沒有出現類似的圖，
    那我們幾乎很肯定，這個套件有地方壞掉了。
    在Open Source的世界，程式壞掉也常常是我們使用的套件壞掉，
    而不是我們寫出錯誤的程式碼。

- Class: text
  Output: |
    如果同學一開始就自己寫程式碼，萬一出錯時，
    就分不出來是自己寫錯，還是套件出錯了。

- Class: text
  Output: |
    接著同學可以在這個課程結束後，
    依照官網推薦的閱讀順序，將leaflet的功能仔細閱讀過一遍。
    在接下來的練習中，老師則是要拿地震的資料，做一個leaflet的展示。

- Class: cmd_question
  Output: |
    eq是來自<http://earthquake.usgs.gov>所抓取的地震資料。
    請同學輸入`View(eq)`觀察一下這筆資料。

- Class: text
  Output: |
    同學可以看到，eq中有提供地震的位置(經緯度：longitude, latitude)
    和地震的規模(mag)。

- Class: cmd_question
  Output: |
    接著我們示範一次如何一邊將地震畫在地圖中。
    首先我們要基於`eq`資料來建立地圖物件。
    這種概念很接近`ggplot2`：讓我們接下來可以直接用
    `eq`的欄位名稱來指定資料源，而不是透過直接告訴
    leaflet地圖的相關資訊。
    請同學輸入：`twmap <- leaflet(eq)`。
  CorrectAnswer: twmap <- leaflet(eq)

- Class: cmd_question
  Output: |
    接著請同學輸入: `twmap2 <- addMarkers(twmap, lng = ~longitude, lat = ~latitude)`
    這段指令的效果我們等下再來解釋。
  CorrectAnswer: twmap2 <- addMarkers(twmap, lng = ~longitude, lat = ~latitude)

- Class: cmd_question
  Output: |
    接著請同學輸入`twmap2`把我們目前的結果畫出來。
    
- Class: text
  Output: |
    同學可以看到許多圖上的標記。
    這就是`addMarkers`的效果。
    leaflet也提供許多類型的標記效果，同學可以在
    leaflet的官網上近一步學習相關函數，以及相關參數。
    在這裡，我們畫出的標記座標，則是基於`eq$longitude`
    與`eq$latitude`的數值所繪製的。
    這則是`~longitude`與`~latitude`的效果。

- Class: text
  Output: |
    在R中，這種帶有`~`符號的expression通稱為`formula`。
    在大部分的狀況下，`formula`要搭配`data.frame`一起使用，
    而`formula`中的名稱則代表`data.frame`中的欄位名稱。
    有興趣的同學可以`?formula`了解更多

- Class: text
  Output: |
    另一個同學會想問的問題是，目前這張圖中並沒有底圖。
    這導致它看起來完全不像地圖。

- Class: cmd_question
  Output: |
    為了加上底圖，請同學輸入：
    `twmap3 <- addTiles(twmap2)`

- Class: cmd_question
  Output: |
    接著輸入`twmap3`看看加上`addTiles`後的結果。
  CorrectAnswer: twmap3

- Class: text
  Output: |
    leaflet 套件也有提供同學操控底圖大小、範圍的參數。
    細節再麻煩同學閱讀`?addTiles`或是leaflet官網中的說明了。

- Class: cmd_question
  Output: |
    接下來，我們介紹最後一個範例。請同學輸入：
    `twmap4 <- addMarkers(twmap, lng = ~longitude, lat = ~latitude, label = ~paste("Magnitude:", mag))`

- Class: cmd_question
  Output: |
    再請同學輸入`twmap4`看看結果

- Class: text
  Output: |
    透過參數`label`，我們可以在標記上加註文字。
    當同學用滑鼠滑到標記上方時，就會自動出現一段文字。

- Class: text
  Output: |
    這段文字是透過`label=~paste("Magnitude:", mag)`來產生的。
    透過formula的方式，R會自動用`eq$mag`來帶入`mag`，然後
    處理`paste("Magnitude:", eq$mag)`這個expression，再把
    結果放到`label`中。

- Class: script
  Output: |
    我們請同學利用之前所學，從`pirate_path`中爬取經緯度，再利用leaflet將海盜的通報事件畫到地圖上。
  Script: RVisualization-04-HW.R
  AnswerTests: pass()
