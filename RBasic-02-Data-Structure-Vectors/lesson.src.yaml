- Class: meta
  Course: DataScienceAndR
  Lesson: RBasic-02-Data-Structure-Vectors
  Author: Wush Wu
  Type: Standard
  Organization: Taiwan R User Group
  Version: 1.0

- Class: text
  Output: 這門課程，主要是講解R object的入門操作。

- Class: text
  Output: R 的object結構是針對資料分析所設計的。所以最簡單
    的object，就是一連串的數字。

- Class : text
  Output: 這讓R 和其他的程式語言不同，因為一般的程式語言
    最簡單的object會是一個數字。

- Class : text
  Output: R 這樣設計的理由是因為在資料分析的應用中，
    我們一定是處理一些資料，而不會只有一筆資料。


- Class: cmd_question
  Output: 要用R 建立一個內容為10.4, 5.6, 3.1和6.4的向量，
    最常用的方式就是輸入：`c(10.4, 5.6, 3.1, 6.4)`
    請同學依照這樣的語法建立一個這樣的向量，並且把它存到變數x。
  CorrectAnswer: x <- c(10.4, 5.6, 3.1, 6.4)
  AnswerTests: any_of_exprs("x <- c(10.4, 5.6, 3.1, 6.4)",
    "x = c(10.4, 5.6, 3.1, 6.4)")


- Class: mult_question
  Output: 請問同學，剛剛我們輸入的語法是assignment還是expression?
  AnswerChoices: assignment;expression
  CorrectAnswer: assignment
  AnswerTests: omnitest(correctVal= 'assignment')

- Class : cmd_question
  Output: 在R 中，`c()`可以接受任意數量的的向量參數，並且會依照順序把它們
    串接成一個單一向量。舉例來說：`c(x, 1)`會在剛剛我們建立的x 後面
    再接一個1 。而`c(x, 2, 3)`則會在x 之後接上2 和3 。請同學依照這個要領，
    撰寫一個expression，內容是建立一個在x 後面接上x 的向量。
  CorrectAnswer: c(x, x)
  AnswerTests: |
    test_all(omnitest(correctExpr='c(x, x)'),
      val_is(c(10.4, 5.6, 3.1, 6.4, 10.4, 5.6, 3.1, 6.4)))

- Class : cmd_question
  Output: 在R 中，大部份的運算都是向量式的。舉例來說，加法`+`在R 就是向量式。
    請同學輸入：`c(1, 2, 3) + c(2, 4, 6)` 並觀察結果。
  CorrectAnswer: c(1, 2, 3) + c(2, 4, 6)
  AnswerTests: |
    test_all(omnitest('c(1, 2, 3) + c(2, 4, 6)'),
      val_is(c(3, 6, 9)))

- Class: text
  Output: 有沒有注意到，結果的第一個值，就是輸入的兩個向量的第一個
    值的相加呢？以此類推，一直到第三個值都還是這樣。這就是「向量式」
    的意思。

- Class : cmd_question
  Output: 但是當相加的兩個向量長度不同的時候，會發生什麼事情呢？
    R 會自動重複比較短的向量，補到長度和比較長的向量相同，然後用
    一樣的概念去做計算。請同學輸入`2 + c(1,2,3)`試試看。
  CorrectAnswer: 2 + c(1,2,3)
  AnswerTests: omnitest(correctExpr='2 + c(1,2,3)')

- Class: text
  Output: 向量式的運算讓我們在處理資料上非常容易。在R 之中，除了加減乘除
    之外，而許多常用的數學算式都是向量式的。例如：`log`、`exp`、`sin`、
    `cos`、`tan`和｀sqrt、。

- Class : cmd_question
  Output: 不是所有的運算都是向量式的。如果給定一個向量x ,
    `max(x)`會傳回x 中最大的值，而`min(x)`會傳回x 最小的值。
    有時候在分析的時候，我們如果想要知道數值的範圍，這兩個函數
    就很有用。請同學寫一個expression來建立一個兩個值的向量，
    而且第一個值是x 的最小值，第二個是x 的最大值。
  CorrectAnswer: c(min(x), max(x))
  AnswerTests: val_is(c(min(x), max(x)))

- Class : cmd_question
  Output: 在R 中，有一個函數`range`就能直接傳回輸入向量的
    範圍（最小到最大）。請同學再算一次x 的範圍，但是是使用
    `range`
  CorrectAnswer: range(x)
  AnswerTests: omnitest('range(x)')

- Class : cmd_question
  Output: 在R 中，`sum(x)`會傳回x 所有值的加總。
    `length(x)`函數能直接傳回x 的長度。請同學利用
    `sum`和`length`計算x 的平均值。
  CorrectAnswer: sum(x) / length(x)
  AnswerTests: omnitest(correctExpr = 'sum(x)/length(x)')
  Hint: 除法可以用 `/`

- Class : text
  Output: R 也內建許多統計相關的函數。例如`mean(x)`就能直接
    計算x 的平均值。透過`mean`、`sum`和`length`，我們就能計算x 的樣本變異數：
    `sum((x - mean(x))^2) / (length(x)-1)`。但是R 也有內建的函數
    來簡化我們的工作。
    透過`var(x)`，我們就能簡單用短短的函數計算樣本變異數。

- Class : cmd_question
  Output: 請利用`var`計算x 的樣本變異數。
  CorrectAnswer: var(x)
  AnswerTests: omnitest(correctExpr = 'var(x)')

- Class : cmd_question
  Output: 請利用`sd`計算x 的樣本標準差。
  CorrectAnswer: sd(x)
  AnswerTests: omnitest(correctExpr = 'sd(x)')

- Class : cmd_question
  Output: 在R 中，`sort(x)`則會產生一個和x 長度一樣的向量，但是值是
    由小到大排列。請同學試試看：`sort(x)`
  CorrectAnswer: sort(x)
  AnswerTests: omnitest(correctExpr = 'sort(x)')

- Class : text
  Output: 在數學上，輸入的x 可能是整數、實數甚至是複數。
    R 的數學計算，會自動根據x 的屬性做調整。

- Class : cmd_question
  Output: 舉例來說，如果我們輸入`sqrt(-17)`，我們會得到NaN（Not A Number）。
    請同學試試看輸入`sqrt(-17)`。這裡的`sqrt`代表的就是數學上開根號的運算。
  CorrectAnswer: sqrt(-17)
  AnswerTests: omnitest(correctExpr = 'sqrt(-17)', correctVal = NaN)

- Class : text
  Output: 在數學上，對負數開根號，在實數中是沒有答案的。

- Class : cmd_question
  Output: 但是若我們使用`sqrt(-17 + 0i)`，這時候因為輸入的是一個複數，
    R 會自動調整行為，不再回傳一個NaN。請同學試試看。
  CorrectAnswer: sqrt(-17 + 0i)
  AnswerTests: omnitest(correctExpr = 'sqrt(-17 + 0i)')

- Class : cmd_question
  Output: R 也有簡易的功能可以產生一些附帶有規則的序列。例如：
    `1:10`就會產生自1 至10的序列。這樣的功能，在整理資料的時候
    很常用。例如說，如果我們需要取出第5筆到第100筆的資料，就會
    用到類似的語法。
    請同學嘗試利用`:`建立一個從20到40的序列。
  CorrectAnswer: 20:40
  AnswerTests: omnitest("20:40")

- Class : cmd_question
  Output: 在R 中，`:`這個運算子的優先層級很高，也就是說如果R 看到：`2 * 1:10`
    這段expression，會優先處理`1:10`，然後再把所有結果乘以2。
    我們來讓同學試試看，請輸入：`2 * 1:10`
  CorrectAnswer: 2 * 1:10
  AnswerTests: omnitest(correctExpr = '2 * 1:10')

- Class: cmd_question
  Output: 另外我們也跟各位介紹一個更泛用產生向量的方式：`seq`。
    `seq(1, 10)` 在R 中，其實就是`1:10`。請試試看輸入`seq(1, 10)`
  CorrectAnswer: seq(1,10)
  AnswerTests: omnitest(correctExpr = 'seq(1,10)')

- Class : cmd_question
  Output: 這裡的`seq`本質上就是一個「函數」，而`seq(1,10)`這段
    expression中，我們稱呼1 和10為這個函數的arguments。
    讓我們來看一下`seq`可以接受幾個參數。請同學用之前介紹的方式，
    打開seq的說明文件。
  CorrectAnswer: ?seq
  AnswerTests: any_of_exprs("?seq", "help(seq)")

- Class : text
  Output: 我們可以在說明文件上，閱讀 Default S3 method 之下的那段說明程式碼：
    `seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),
    length.out = NULL, along.with = NULL, ...)`
    這段說明文字顯示了，`seq`一般來說接受五個參數，而他們分別為：
    `from`、`to`、`by`、`length.out`和`along.with`。

- Class : text
  Output: 對於個別參數的使用方法，我們可以閱讀在Arguments之下的細節說明。
    比如說，`from, to from, to     the starting and (maximal) end values of
    the sequence. Of length 1 unless just from is supplied as an unnamed
    argument.` 這段文字就說明了`from`和`to`的用法。

- Class : text
  Output: 有時候，說明文字不如程式碼來得清楚，所以我們可以直接翻閱到說明文件
    的最底下，查閱Examples段落之中官方文件提供的`seq`的範例。

- Class : cmd_question
  Output: 如果要嘗試跑這些範例，我們可以簡單輸入：`example(seq)`
    請同學跟著輸入。
  CorrectAnswer: example(seq)
  AnswerTests: omnitest(correctExpr = 'example(seq)')

- Class : text
  Output: 在R 中，`seq`的參數共有：`from`、`to`、`by`、`length.out`和`along.with`。
    如果我們不指定，而是依照順序填入：`seq(1, 10)`，那就代表`from`是1 、
    `to`是10、而`by`等其他argument就使用預設參數。

- Class : cmd_question
  Output: 我們也可以透過指定參數名稱的方式來告訴R `seq`的參數是什麼。
    舉例來說，`seq(to = 10, from = 1)`告訴R 說參數`from`是1 而`to`是10。
    所以結果應該要和`seq(1,10)`相同。請同學試試看。
  CorrectAnswer: seq(to = 10, from = 1)
  AnswerTests: omnitest(correctExpr = 'seq(to = 10, from = 1)')

- Class : cmd_question
  Output: 利用`seq`產生的序列也不一定要間隔是1 。如果我們希望間隔是0.5，
    `seq`函數是透過`by`這個參數來控制間隔的，所以只要輸入`seq(1, 10, by = 0.5)`
    就好了。請同學試試看。
  CorrectAnswer: seq(1, 10, by = 0.5)
  AnswerTests: omnitest(correctExpr = 'seq(1, 10, by = 0.5)')

- Class : cmd_question
  Output: 有時候產生序列的方式，可以是指定開頭、間隔和長度。在`seq`中，
    這對應到`from`、`by`和`length.out`這三個參數。請同學自己寫一個
    expression，產生一個從1 開始，間隔2 ，長度為10的序列。參數請透過
    名稱來給定。
  CorrectAnswer: seq(from = 1, by = 2, length.out = 10)
  AnswerTests: any_of_exprs('seq(from = 1, by = 2, length.out = 10)',
    'seq(1, by = 2, length.out = 10)')

- Class : text
  Output: R 很聰明，在指定argument的時候不用指定全名，而只要給出前面幾個可以
    讓R 辨別argument名稱的字母就可以了。舉例來說：
    `seq(from = 1, by = 2, length = 10)`也可以讓R 知道argument `length.out`的值
    是10。

- Class : cmd_question
  Output: 如果我們不想要序列，而是想要重複一個數字，則可以用`rep`
    請同學試試看：`rep(2, times = 10)`
  CorrectAnswer: rep(2, times = 10)
  AnswerTests: omnitest(correctExpr = 'rep(2, times = 10)')

- Class : cmd_question
  Output: 在R 中，`rep`也可以作用在一個序列上。如果使用者是了argument `times`定值，
    那R 會將整個序列重複`times`次，然後接起來。請同學試試看：
    `rep(x, times = 2)`
  CorrectAnswer : rep(x, times = 2)
  AnswerTests: omnitest(correctExpr = 'rep(x, times = 2)')

- Class : cmd_question
  Output: 如果我們沒有指定`rep`的argument `times`，而是argument `each`，
    那R 會把向量的每一個值個別重複`each`遍之後，再接起來。
    請同學試試看：`rep(x, each = 2)`
  CorrectAnswer: rep(x, each = 2)
  AnswerTests: omnitest(correctExpr = 'rep(x, each = 2)')

- Class : text
  Output: 在R 中，`seq`和`rep`的搭配使用，在整理資料的時候很常用。
    有興趣的同學可以在後續的實例教材中，看看如何應用這兩個函數
    解決一些整理資料的問題。

- Class : text
  Output: 在R 中，除了數值之外，邏輯值也是很常見的。類似數值，
    R 最基礎的object之一，就是邏輯向量。而我們看到的一個值，只是
    一個長度是1 的向量。

- Class : text
  Output: 邏輯向量常常表示資料中如：「是、否」、「男、女」之類二
    選一的選項。除此之外，在程式碼的流程控制，也是很常用。

- Class : text
  Output: 在R 中，邏輯值「真」常用`TRUE`或`T`來代表。「假」則用
    `FALSE`或`F`代表。第三種在邏輯向量會出現的值，就是NA（Not Available）。
    注意：這裡的`T`和`F`是一個預設值是`TRUE`或`FALSE`的變數，並不是保留字。
    所以同學是可以更改`T`和`F`的內容的！

- Class: cmd_question
  Output: 我們可以利用各種「條件類型的expression」來建立邏輯向量。
    舉例來說，我們手上有x ，就可以利用`x > 5`來建立一個長度和x 相同
    的邏輯向量。請同學試試看。
  CorrectAnswer: x > 5
  AnswerTests : omnitest(correctExpr = 'x > 5')

- Class : text
  Output: 從結果可以看到，R 會拿x （`c(10.4, 5.6, 3.1, 6.4)`）的值
    一個個的和5 做比較。比較大的就是TRUE，而比較小的是FALSE。

- Class : text
  Output: 類似可用於建立邏輯向量的「條件」有：大於`>`、大於等於`>=`、
    小於`<`、小於等於`<=`、相等`==`和不相等`!=`。
    這類邏輯向量在整理資料時，做資料篩選上是很常用的。

- Class : cmd_question
  Output: 另外邏輯運算子「且」`&`和「或」`|`也是很常用的。他們可以
    在兩個邏輯向量中做運算。請同學試試看：`x > 5 & x < 10`
  CorrectAnswer: x > 5 & x < 10
  AnswerTests: omnitest(correctExpr = 'x > 5 & x < 10')

- Class : text
  Output: 輸出結果，應該是那些x （`c(10.4, 5.6, 3.1, 6.4)`）的值
    介於5 和10之間的為TRUE，否則就為FALSE。當我們在篩選資料的時候，
    有時候要篩選的條件很複雜，需要用多個條件來組合而成時，就會用到
    `&`和`|`了。

- Class : text
  Output: 有時候，當資料的值無法取得的時候，R 就會給它一個特殊的記號：
    NA。所有和NA做的運算結果，通常都會是NA。就常識來看，這很合理。因為
    「無法取得的數字」加上1 ，結果還是「無法取得」

- Class : cmd_question
  Output: 我們可以利用`is.na`來判斷一個向量裡面有沒有NA。請同學試試看
    `is.na(x)`
  CorrectAnswer: is.na(x)
  AnswerTests: omnitest('is.na(x)')

- Class : cmd_question
  Output: 在R 中，`is.na(x)`的結果應該都是FALSE，因為x 的資料裡面沒有NA。
    我們來玩一個有NA的向量吧！請試試看：`is.na(c(1,2,NA,3))`
  CorrectAnswer: is.na(c(1,2,NA,3))
  AnswerTests: omnitest('is.na(c(1,2,NA,3))')

- Class : cmd_question
  Output: 在R 之中，我們已經看過兩種特別的記號：NA和NaN。
    NA代表的是缺失值，而NaN 往往來自於數學運算中沒有定義的行為。
    例如：`sqrt(-17)`、`0/0`和`Inf - Inf`。在R 裡面，無限大就是`Inf`。
    R 對這些數學的處理是很聰明的。舉例來說，同學們可以試試看R 計算
    `Inf + 1` 的結果：
  CorrectAnswer: Inf + 1
  AnswerTests: omnitest('Inf + 1')

- Class: cmd_question
  Output: 雖然我們理解NA和NaN的不同，但是`is.na`會把兩者都看成TRUE。
    舉例來說，請同學試試看：`is.na(c(NA, NaN, 1))`
  CorrectAnswer: is.na(c(NA, NaN, 1))
  AnswerTests: omnitest('is.na(c(NA, NaN, 1))')

- Class : text
  Output: 有時候，我們需要處理文字類型的object。這些object常常用於
    指定繪圖的標題、或是處理一些類別形變數，如：國籍、行政區等等。
    這樣的資料，在R 之中是透過單引號`'`或雙引號`"`來建立的。
    這類的資料，常常被人稱為：「字串」。

- Class : cmd_question
  Output: 舉例來說，如果我們直接輸入`x`而不用雙引號包覆它，R
    會把這個`x`當成變數名稱，而回傳x 的內容。請同學試試看輸入：`x`
  CorrectAnswer: x
  AnswerTests: omnitest('x')

- Class : cmd_question
  Output: 但是如果我們輸入的是`"x"`，那R 就會認為這是一個只有一個
    字元、內容為"x"的字串。請同學試試看：`"x"`
  CorrectAnswer: "\"x\""
  AnswerTests: any_of_exprs('"x"', "'x'")

- Class : text
  Output: 由於方便教材的設計，後續操作swirl的時候，請同學
    儘量使用`"`來建立字串。

- Class : cmd_question
  Output: 這類文字類型的object，在R 中，`\`符號代表字串中的跳脫符號。
    舉例來說，如果我們要輸入一個包含雙引號的字串，有兩種方法：一種是用
    單引號`'`來包覆雙引號，另外一種就是在雙引號之前插入`\`。請同學試試看
    用跳脫符號的方式，輸入一個字串，內容只有一個雙引號。
  CorrectAnswer: "\"\\\"\""
  AnswerTests: omnitest(correctVal = '"')

- Class : cmd_question
  Output: 在R 中，`paste`是在R 中常常用來做字串處理的函數。我們可以丟任意個
    arguments 給`paste`，結果R 會把這些argument以字串的形式接成一個字串。
    請同學試試看：`paste("a", "b")`
  CorrectAnswer: paste("a", "b")
  AnswerTests: omnitest('paste("a", "b")')

- Class : cmd_question
  Output: 請同學試試看：`paste(c("X", "Y"), 1:10)`
  CorrectAnswer: paste(c("X", "Y"), 1:10)
  AnswerTests: omnitest('paste(c("X", "Y"), 1:10)')

- Class : text
  Output: 你可以注意到，`1:10`被自動轉換成字串了。這又是一個
    R 會自動判斷形態的例子。同時，我們可以注意到`c("X", "Y")`
    重複了五次，這是因為`paste`也是一個向量化的函數。

- Class : cmd_question
  Output: 另一個你會注意到的，是`paste`預設會在串接字串時，在
    中間留下一個空格。如果這不是你喜歡的，可以使用`paste0`這個
    和`paste`幾乎一模一樣的函數。除了一點：`paste0`預設在串接字串
    的時候，中間是不會有空格的。同學請試試看：`paste0(c("X", "Y"), 1:10)`
  CorrectAnswer: paste0(c("X", "Y"), 1:10)
  AnswerTests: omnitest('paste0(c("X", "Y"), 1:10)')

- Class : text
  Output: 最後，我們要介紹一個整理資料上非常重要的功能：如何
    挑選向量中一部份的資料。

- Class : cmd_question
  Output: 第一種方法，使用坐標。在R 之中，如果我們要挑選x 的
    第一個和第三個位置的值，只要使用：`x[c(1,3)]`。
    請同學試試看。
  CorrectAnswer: x[c(1,3)]
  AnswerTests: omnitest('x[c(1,3)]')

- Class : cmd_question
  Output: 第二種方法，是利用邏輯向量。舉例來說，如果我們要
    挑選x 之中超過5 的值，就透過`x[x > 5]`。請同學試試看。
  CorrectAnswer: x[x > 5]
  AnswerTests: omnitest('x[x>5]')

- Class : cmd_question
  Output: 第三種方法，是削去法。如果我們要挑x _除了_第二個之外的
    全部的值，可以使用`x[-2]`
  CorrectAnswer: x[-2]
  AnswerTests: omnitest('x[-2]')

- Class : cmd_question
  Output: 最後一個方法比較特別，我們要先介紹在R 中names的概念。
    R 的向量中，每一個值是可以有名字的。舉例來說，我們可以透過：
    `names(x) <- c("a", "b", "c", "d")`來幫x 的每個值取名。
    請同學試試看。
  CorrectAnswer: names(x) <- c("a", "b", "c", "d")
  AnswerTests: omnitest('names(x) <- c("a", "b", "c", "d")')

- Class : cmd_question
  Output: 現在我們來把x 印到螢幕上看看。
  CorrectAnswer: x
  AnswerTests: any_of_exprs('x', 'print(x)')

- Class : text
  Output: 我們可以看到R 現在顯示每個x 的值時，也會在上一行對應的
    位置上印出它的名字了。

- Class : cmd_question
  Output: 所以如果我們想要選取名稱為`c("b", "d")`的值，就只要輸入：
    `x[c("b", "d")]`。請同學試試看。
  CorrectAnswer: x[c("b", "d")]
  AnswerTests: omnitest('x[c("b", "d")]')

- Class : text
  Output: 關於R 資料結構的入門就到這裡了。接下來，只要再
    學會對於矩陣和data.frame的操作，我們就可以開始解決實際
    的問題了！

- Class: script
  Output: 最後我們想請同學試試看用今天所學的方法，整理台電的公開數據。
    請同學在完成之後存檔，並輸入`submit()`來檢查結果是否符合預期。
    如果同學在檔案中看到亂碼，請使用Rstudio 左上角的File -> Reopen
    With Encoding... -> 選取：UTF-8
  Script: RBasic-02-HW.R
  AnswerTests: rbasic_02_hw_test()
